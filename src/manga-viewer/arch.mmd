graph TD
    %% Main structure
    Main["Userscript: mangaViewer.user.js"] --> Init["Initialize script"]
    
    %% Key Classes and Functions
    Init --> CreateClasses["Create core classes"]
    Init --> RegisterCommands["Register Tampermonkey menu command"]
    Init --> InitEvents["Setup event handlers and observers"]
    
    %% Core Classes
    CreateClasses --> LoadingSpinner["LoadingSpinner
        - Display/hide loading UI
        - Show progress
        - Update messages"]
    
    CreateClasses --> ChapterNavigator["ChapterNavigator
        - Handle chapter navigation
        - Auto-launch after navigation"]
    
    CreateClasses --> ViewerComponent["ViewerComponent (React)
        - Show manga in book-like view
        - Handle page turning
        - Handle zooming and user input"]
    
    CreateClasses --> UIBuilder["UIBuilder
        - Create viewer container
        - Preload images
        - Update images"]
    
    CreateClasses --> DataLoader["DataLoader
        - Adaptive image collection
        - Multi-strategy loading detection
        - Site-agnostic URL validation"]
    
    CreateClasses --> UIManager["UIManager
        - Manage viewer state
        - Close viewer"]
    
    %% Main Functions
    InitEvents --> LaunchViewer["launchViewer()
        - Create spinner
        - Collect images
        - Build and show viewer"]
    
    InitEvents --> CreateLaunchButton["createLaunchButton()
        - Add floating button to page
        - Attach launch handler"]
    
    InitEvents --> SetupMutationObserver["setupMutationObserver()
        - Watch for image elements
        - Handle URL changes"]
    
    InitEvents --> CheckForTwitterImages["checkForTwitterImages()
        - Show launch button on X/Twitter
        - When images are found"]
    
    InitEvents --> OnPageLoad["onPageLoad()
        - Initialize based on current site
        - Check for auto-launch
        - Setup observers"]
    
    %% Enhanced DataLoader with Adaptive Loading System
    DataLoader --> AnalyzePageState["analyzePageLoadingState()
        - Detect loading patterns
        - Choose optimal strategy
        - Set adaptive timeout"]
    
    AnalyzePageState --> DetectionMethods["Detection Methods:"]
    DetectionMethods --> DetectLazy["detectLazyLoading()
        - data-src attributes
        - loading='lazy'
        - lazy CSS classes
        - placeholder images"]
    
    DetectionMethods --> DetectDynamic["detectDynamicContent()
        - Infinite scroll
        - AJAX indicators
        - Load more buttons"]
    
    DetectionMethods --> DetectLoading["detectLoadingIndicators()
        - Loading spinners
        - document.readyState
        - aria-busy attributes"]
    
    DetectionMethods --> DetectSPA["detectSPA()
        - React/Vue/Angular
        - SPA patterns
        - App containers"]
    
    DetectionMethods --> DetectSiteSpecific["detectSiteSpecificPatterns()
        - nicomanga.com
        - pixiv.net
        - manga sites"]
    
    %% Adaptive Waiting Strategies
    AnalyzePageState --> WaitStrategies["waitForImagesAdaptive()
        - Strategy selection
        - Timeout management"]
    
    WaitStrategies --> WaitLazy["waitForLazyLoadedImages()
        - Monitor data-src â†’ src
        - DOM mutation observer
        - Load ratio tracking"]
    
    WaitStrategies --> WaitDynamic["waitForDynamicContent()
        - Image count stabilization
        - Content change detection"]
    
    WaitStrategies --> WaitPageLoading["waitForPageLoading()
        - readyState monitoring
        - Image count validation"]
    
    WaitStrategies --> WaitSPA["waitForSPAContent()
        - Content hash stability
        - DOM structure monitoring"]
    
    WaitStrategies --> WaitManga["waitForMangaImages()
        - Legacy manga site support
        - Container-based detection"]
    
    %% Collection Methods
    DataLoader --> CollectGenericImages["collectGenericImages()
        - Universal image collection
        - Adaptive waiting integration"]
    
    DataLoader --> ScrollTwitter["scrollTwitterPageToCollectImages()
        - Twitter/X specialized handling
        - Timeline scrolling"]
    
    DataLoader --> ValidateUrls["validateUrlsWithMetadata()
        - Optimized validation
        - Same-origin detection
        - Batch processing"]
    
    %% ViewerComponent detailed functions
    ViewerComponent --> UserInteractions["User Interactions:
        - Mouse/touch 
        - Keyboard (arrows, WASD, etc.)
        - Zoom controls"]
    
    ViewerComponent --> UserEvents{{"Event Handlers:
        - Clicks
        - Keyboard
        - Mouse wheel
        - Drag"}}
    
    ViewerComponent --> ViewerUI["Viewer UI:
        - Header with controls
        - Progress indicators
        - Navigation hints"]
    
    %% Key Data Flows
    LaunchViewer --> |1. Start| LoadingSpinner
    LaunchViewer --> |2. Analyze & Collect| DataLoader
    LaunchViewer --> |3. Build| UIBuilder
    DataLoader --> |URLs| UIBuilder
    UIBuilder --> |React Component| ViewerComponent
    ChapterNavigator --> |Auto Navigation| ViewerComponent
    ViewerComponent --> |Close Event| UIManager

    %% Enhanced Image Loading Flow
    subgraph "Adaptive Image Loading Flow"
        direction TB
        StartFlow["Start Collection"] --> AnalyzeFlow["Analyze Page State
        - Detect loading patterns
        - Choose strategy"]
        AnalyzeFlow --> StrategyFlow{{"Selected Strategy"}}
        
        StrategyFlow --> |Lazy Loading| LazyFlow["Wait for Lazy Images
        - Monitor data-src changes
        - Track load progress"]
        
        StrategyFlow --> |Dynamic Content| DynamicFlow["Wait for Dynamic Content
        - Monitor image count
        - Detect stabilization"]
        
        StrategyFlow --> |Page Loading| PageFlow["Wait for Page Loading
        - Monitor readyState
        - Validate image count"]
        
        StrategyFlow --> |SPA| SPAFlow["Wait for SPA Content
        - Monitor content hash
        - Detect DOM stability"]
        
        StrategyFlow --> |Site-Specific| SiteFlow["Site-Specific Waiting
        - Legacy support
        - Container monitoring"]
        
        LazyFlow --> CollectFlow["Collect URLs"]
        DynamicFlow --> CollectFlow
        PageFlow --> CollectFlow
        SPAFlow --> CollectFlow
        SiteFlow --> CollectFlow
        
        CollectFlow --> ValidateFlow["Validate Images
        - Size checking
        - Format validation"]
        ValidateFlow --> DisplayFlow["Display First Batch"]
        ValidateFlow --> BackgroundFlow["Background Processing"]
        BackgroundFlow --> UpdateFlow["Update Viewer"]
    end

    %% Site Compatibility Matrix
    subgraph "Site Compatibility"
        direction LR
        SiteTypes["Supported Sites:"]
        SiteTypes --> TwitterSites["Twitter/X
        - Timeline scrolling
        - High-res image extraction"]
        SiteTypes --> MangaSites["Manga Sites
        - nicomanga.com
        - pixiv.net
        - Generic manga sites"]
        SiteTypes --> LazySites["Lazy Loading Sites
        - data-src detection
        - Intersection Observer"]
        SiteTypes --> SPASites["SPA Sites
        - React/Vue/Angular
        - Dynamic content"]
        SiteTypes --> GenericSites["Generic Sites
        - Basic image detection
        - Fallback strategies"]
    end

    %% Userscripts Features
    RegisterCommands --> MenuCommand["GM_registerMenuCommand
        - Add to Tampermonkey menu"] 